variables:
  AMBIENTE:
    value: "Seleccionar"
    options:
      - "Seleccionar"
      - "Produccion"
      - "QA"
    description: "Seleccionar que ambiente requieres desplegar, por defecto en qa"
  QUALITY_VERIFY:
    value: "SI"
    options:
      - "Seleccionar"
      - "SI"
      - "NO"
    description: "Seleccionar si valida Calidad"
  RELEASE_CANDIDATE_PROD:
    description: "Necesario si el valor de AMBIENTE es 'Produccion'"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .m2/repository


stages:
    - setup
    - build
    - test
    - analitycs
    - release
    - delivery
    - deploy
    - AutomatedQA


prepare:
    stage: setup
    image: alpine:latest
    script:
        - printenv | sort 
        - echo "CURRENT_DATE=$(date +%Y%m%d%H%M%S)" > setup.env
        - cat setup.env
    artifacts:
        reports:
            dotenv: setup.env
    rules:
        - if: '$CI_COMMIT_BRANCH == "release" && $AMBIENTE == "QA"'
#          when: manual
#        - when: never
Promote:
    stage: setup
    variables:
      GIT_STRATEGY: none 
      BRANCH_SOURCE: "develop"
      BRANCH_RELEASE: "release"
    image: alpine:latest
    before_script:
      - apk add --no-cache curl jq git
      - git config --global user.email "$GITLAB_USER_EMAIL"
      - git config --global user.name "$GITLAB_USER_NAME"
    script:
      - echo "Ejecutando de Plantilla"   
      - echo "-----------Respaldar el archivo CI release -------"
      - >
        curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/files/.gitlab-ci.yml/raw?ref=release" --output .gitlab-ci.yml
      - BACK_CI_FILE=$PWD/.gitlab-ci.yml
      - echo "----------- Reemplazar release con develop -------"
      - git clone https://$GITLAB_USER_LOGIN:$GITLAB_TOKEN@gitlab.com/$CI_PROJECT_PATH --branch $BRANCH_SOURCE  temp_dir
      - cd temp_dir
      - git checkout $BRANCH_RELEASE && git pull origin $BRANCH_RELEASE #Cambiar y descargar release
      - git fetch origin $BRANCH_SOURCE #Descarga el contenido solo en la rama develop sin afecta la rama actual.       
      - git reset --hard origin/$BRANCH_SOURCE # Reemplazar todo el contenido de release con develop previamente descaggada con fetch
      - rm -f .gitlab-ci.yml #Remover archivo CI de develop
      - cp $BACK_CI_FILE . && git add .gitlab-ci.yml #Copiar archivo de CI release y agregarlo al staging.
      - git commit --allow-empty -m "Last Execute for $CURRENT_DATE" 
      - git push --force origin $BRANCH_RELEASE  #Push los cambios a la rama release 
      - echo "Fin Ejecutando de Plantilla" 
    needs:
      - prepare
    rules:      
      - if: '$CI_COMMIT_BRANCH == "release" && $AMBIENTE == "QA"'


Build:
  stage: build
  image: node:20-alpine
  variables:  
        BRANCH_RELEASE: release 
  before_script:
    - apk add --no-cache curl git zip jq    
  script:
    # Lllama secure files_   
    - npm cache clean --force    
    - npm install   
    - npm install -g @angular/cli
    - ng build
    - zip -r build.zip dist
    - pwd
    - ls -li
    - export VERSION=$(jq -r '.version' package.json)
    - echo "RELEASE_CANDIDATE=RC-V${VERSION}-${CURRENT_DATE}" > build.env
    - echo "VERSION=${VERSION}" >> build.env
    - cat build.env
  artifacts:
    paths:
      - build.zip
    expire_in: 10 min
    reports:
      dotenv: build.env
  needs:
    - prepare
  rules:      
      - if: '$CI_COMMIT_BRANCH == "release" && $AMBIENTE == "QA"'


JunitTest:
    stage: test
    image: node:20.15
    variables:
        BRANCH_RELEASE: release     
    before_script:
        - echo $RELEASE_CANDIDATE 
        - apt-get install git wget gnupg
        - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
        - sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        - apt update
        - apt install -y google-chrome-stable
    script: 
        - npm install -g @angular/cli
        - npm install karma --save-dev
        - npm install karma-junit-reporter --save-dev
        - npm install karma-coverage-istanbul-reporter  --save-dev
        - ng test --karma-config=karma.conf.js --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage 

    artifacts: 
      paths:
        - coverage/
        - test-results/
      reports:
        junit:
          - test-results/junit.xml
    needs:
      - prepare
    rules:
        #- if: '$CI_COMMIT_BRANCH == "release" && $AMBIENTE == "QA"'
        - if: '$CI_PIPELINE_SOURCE != "push" && $CI_COMMIT_TAG !~ /^RC-/'


sonarcloud-check:
  stage: analitycs
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - sonar-scanner
      -Dsonar.sources=./src
      -Dsonar.tests=./src/app
      -Dsonar.test.inclusions="**/app/*.spec.ts"
      -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
      -Dsonar.host.url=https://sonarcloud.io
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.organization=$SONAR_ORG
  needs:
    - JunitTest
  rules:
    #- if: '$CI_COMMIT_BRANCH == "release" && $AMBIENTE == "QA"'
    - if: '$CI_PIPELINE_SOURCE != "push" && $CI_COMMIT_TAG !~ /^RC-/' 

quality-gate:
  stage: analitycs
  image:
    name: alpine:latest
    entrypoint: [""]
  needs:
    - sonarcloud-check
  script:
    - apk add --no-cache curl jq
    - |
      status=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=devops-net_fronti" | jq -r '.projectStatus.status')
      if [ "$status" != "OK" ]; then
        echo "Quality gate failed: $status"
        exit 1
      else
        echo "Quality gate passed"
      fi
  allow_failure: false
  rules:
    - if: '$CI_PIPELINE_SOURCE != "push" && $QUALITY_VERIFY == "SI" && $CI_COMMIT_TAG !~ /^RC-/' 

stagging:
    stage: release
    image: alpine:latest
    before_script:
        - echo $RELEASE_CANDIDATE 
        - apk add --no-cache git
        - git config user.email '$GITLAB_USER_EMAIL'
        - git config user.name '$GITLAB_USER_LOGIN'
        - git config --global http.sslVerify "false"
    script:
        - git remote set-url origin "https://$GITLAB_USER_LOGIN:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
        - git fetch --all
        - git checkout release
        - git pull origin release
        - git tag -a ${RELEASE_CANDIDATE} -m "Version creado desde CICD"
        - git push origin ${RELEASE_CANDIDATE}
    after_script: 
        - echo "RELEASE_CANDIDATE=${RELEASE_CANDIDATE}" > stagging.env
        - echo "VERSION=${VERSION}" >> stagging.env
    artifacts:
      reports:
        dotenv: stagging.env
    needs:
      - JunitTest
      - Build
      - sonarcloud-check
    rules:
        - if: '$CI_COMMIT_BRANCH == "release" && $AMBIENTE == "QA"'

publish_image:
    stage: release
    image: docker:26.0.1
    services:
        - docker:20-dind
    variables:
      IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$VERSION-QA
    needs:
        - Build
        - stagging
    script:
        - apk add --no-cache curl   git zip unzip
        - unzip build.zip
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -t $IMAGE .
        - docker push $IMAGE 
    after_script: 
        - echo "VERSION=${VERSION}" > VersionApp.env
        - cat VersionApp.env
    artifacts:
        reports:
            dotenv: VersionApp.env        
    rules:
        - if: '$CI_COMMIT_BRANCH == "release" && $AMBIENTE == "QA"'

deploy_qa:
    stage: deploy
    tags: 
      - srv04 
    variables:  
      IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$VERSION-QA
    before_script:
      - echo hostnamectl
    script:   
      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      - echo "VARS=DEPLOY" > $CI_PIPELINE_ID.env
      - echo "IMAGE=$IMAGE" >> $CI_PIPELINE_ID.env
      - docker compose  --env-file $CI_PIPELINE_ID.env pull
      - docker compose  --env-file $CI_PIPELINE_ID.env up -d
      - docker ps
      - rm -fR ./*
    rules:
        - if: '$CI_COMMIT_BRANCH == "release" && $AMBIENTE == "QA"'
    needs:
        - publish_image
    environment:
        name: QA Environment
        url: http://${SRVDEPLOY}


Functional TestQA:
    stage: AutomatedQA
    tags: 
      - srv04
    variables:
        BRANCH_RELEASE: release
    script:
      - echo $RELEASE_CANDIDATE
      - pwd
      - hostname -I
      - export NVM_DIR="$HOME/.nvm"
      - |
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
        nvm use v20.16.0
      - npm install cypress --save-dev
      - npx cypress run
      #- rm -fR ./* 
    artifacts: 
      paths:
        - cypress/evidences/*
    needs:
        - deploy_qa
    rules:
        - if: '$CI_COMMIT_BRANCH == "release" && $AMBIENTE == "QA"'

secret_detection:
    stage: test 
    rules:
      - if: '$CI_PIPELINE_SOURCE != "push" && $CI_COMMIT_TAG !~ /^RC-/' 
semgrep-sast:
    stage: test 
    rules:
      - if: '$CI_PIPELINE_SOURCE != "push" && $CI_COMMIT_TAG !~ /^RC-/' 
include:
  #- template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
#  - template: Jobs/Build.gitlab-ci.yml
#  - template: Jobs/Container-Scanning.gitlab-ci.yml